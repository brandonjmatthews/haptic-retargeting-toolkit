// Mesh and Skinned Mesh Distance Compute Shader
// Author: Brandon Matthews, 2021

#pragma kernel SkinToPoints
#pragma kernel MeshToPoints
#pragma kernel MeshToMesh
#pragma kernel SkinToMesh
#pragma kernel SkinToSkin
#pragma kernel MeshToPrimitives
#pragma kernel SkinToPrimitives

#include "UnityCG.cginc"
#include "MeshDistanceHelpers.cginc"

// Mesh Vertex and Triangle Information
StructuredBuffer<float3> _MeshVertBufferA;
StructuredBuffer<int> _MeshTriBufferA;
int _MeshTriangleIndexesA, _MeshTriangleCountA;
float4x4 _MeshTransformationA;

StructuredBuffer<float3> _MeshVertBufferB;
StructuredBuffer<int> _MeshTriBufferB;
int _MeshTriangleIndexesB, _MeshTriangleCountB;
float4x4 _MeshTransformationB;

// Skinned Mesh Information
StructuredBuffer<Weight> _SkinnedWeightsA;
float4x4 _SkinnedBoneMatricesA[128];

StructuredBuffer<Weight> _SkinnedWeightsB;
float4x4 _SkinnedBoneMatricesB[128];

// Points
float3 _Points[128];
int _PointsCount;

StructuredBuffer<ComputePrimitive> _Primitives;
int _PrimitiveCount;

// Results output
RWStructuredBuffer<DistanceResult> _ResultBuffer;

float3 transform_float3(in float3 v0, in float4x4 transform) {
  return mul(transform, float4(v0.x, v0.y, v0.z, 1));
}

void transform_triangle(inout float3 v0, inout float3 v1, inout float3 v2, in float4x4 transform) {
	v0 = transform_float3(v0, transform);
	v1 = transform_float3(v1, transform);
	v2 = transform_float3(v2, transform);
}

float3 deform_vertex_a(in float3 v0, int index) {
	Weight weight = _SkinnedWeightsA[index];

	float4x4 bm0 = _SkinnedBoneMatricesA[weight.boneIndex0];
	float4x4 bm1 = _SkinnedBoneMatricesA[weight.boneIndex1];
	float4x4 bm2 = _SkinnedBoneMatricesA[weight.boneIndex2];
	float4x4 bm3 = _SkinnedBoneMatricesA[weight.boneIndex3];

	float4x4 vertexMatrix = bm0 * weight.weight0 + bm1 * weight.weight1 + bm2 * weight.weight2 + bm3 * weight.weight3;

	return transform_float3(v0, vertexMatrix);
}

float3 deform_vertex_b(in float3 v0, int index) {
	Weight weight = _SkinnedWeightsB[index];

	float4x4 bm0 = _SkinnedBoneMatricesB[weight.boneIndex0];
	float4x4 bm1 = _SkinnedBoneMatricesB[weight.boneIndex1];
	float4x4 bm2 = _SkinnedBoneMatricesB[weight.boneIndex2];
	float4x4 bm3 = _SkinnedBoneMatricesB[weight.boneIndex3];

	float4x4 vertexMatrix = bm0 * weight.weight0 + bm1 * weight.weight1 + bm2 * weight.weight2 + bm3 * weight.weight3;

	return transform_float3(v0, vertexMatrix);
	
}

void get_skinned_triangle_a(
	int index,
	out float3 v0, out float3 v1, out float3 v2)
{
	int ia = _MeshTriBufferA[index * 3];
	int ib = _MeshTriBufferA[index * 3 + 1];
	int ic = _MeshTriBufferA[index * 3 + 2];
	
	// Compute deformation based on weights
	v0 = deform_vertex_a(_MeshVertBufferA[ia], ia);
	v1 = deform_vertex_a(_MeshVertBufferA[ib], ib);
	v2 = deform_vertex_a(_MeshVertBufferA[ic], ic);
}

void get_skinned_triangle_b(
	int index,
	out float3 v0, out float3 v1, out float3 v2)
{
	int ia = _MeshTriBufferB[index * 3];
	int ib = _MeshTriBufferB[index * 3 + 1];
	int ic = _MeshTriBufferB[index * 3 + 2];
	
	// Compute deformation based on weights
	v0 = deform_vertex_b(_MeshVertBufferB[ia], ia);
	v1 = deform_vertex_b(_MeshVertBufferB[ib], ib);
	v2 = deform_vertex_b(_MeshVertBufferB[ic], ic);
}


void get_mesh_triangle_a(int index, out float3 v0, out float3 v1, out float3 v2) {
	int ia = _MeshTriBufferA[index * 3];
	int ib = _MeshTriBufferA[index * 3 + 1];
	int ic = _MeshTriBufferA[index * 3 + 2];

	v0 = _MeshVertBufferA[ia];
	v1 = _MeshVertBufferA[ib];
	v2 = _MeshVertBufferA[ic];

	transform_triangle(v0, v1, v2, _MeshTransformationA);
}

void get_mesh_triangle_b(int index, out float3 v0, out float3 v1, out float3 v2) {
	int ia = _MeshTriBufferB[index * 3];
	int ib = _MeshTriBufferB[index * 3 + 1];
	int ic = _MeshTriBufferB[index * 3 + 2];

	v0 = _MeshVertBufferB[ia];
	v1 = _MeshVertBufferB[ib];
	v2 = _MeshVertBufferB[ic];

	transform_triangle(v0, v1, v2, _MeshTransformationB);
}

DistanceResult tri_to_tri_distance(float3 A, float3 B, float3 C, float3 D,
                                   float3 E, float3 F) {

	float3 triABC[3] = {A, B, C};
	float3 triDEF[3] = {D, E, F};
	// Find the minimum distance between each pair of edges (9 total combinations)
	float3 edgeAB[2] = {B, A};
	float3 edgeCB[2] = {C, B};
	float3 edgeAC[2] = {A, C};

	float3 edgeED[2] = {E, D};
	float3 edgeFE[2] = {F, E};
	float3 edgeDF[2] = {D, F};

	float3 triABCEdges[3][2] = {edgeAB, edgeCB, edgeAC};

	float3 triDEFEdges[3][2] = {edgeED, edgeFE, edgeDF};

	int finished = 0;

	DistanceResult result;
	int contact = tri_contact(triABC, triDEF);

	if (contact) {
		result.pointA = float3(0, 0, 0);
		result.pointB = float3(0, 0, 0);
		result.distance = 0.0;
		result.intersecting = 1;
		return result;
	}

	closest_edge_to_edge(triABCEdges, triDEFEdges[0], triDEF[2], finished,
						result);

	if (finished) {
	return result;
	}

	DistanceResult tempResult;
	closest_edge_to_edge(triABCEdges, triDEFEdges[1], triDEF[0], finished,
						tempResult);

	if (tempResult.distance < result.distance) {
	result = tempResult;
	}

	if (finished) {
	return result;
	};

	closest_edge_to_edge(triABCEdges, triDEFEdges[2], triDEF[1], finished,
						tempResult);

	if (tempResult.distance < result.distance) {
	result = tempResult;
	}

	if (finished) {
	return result;
	};

	closest_vert_to_tri(triDEF, triABC, tempResult);
	// closest_vert_to_tri(triDEF, triABC, result);

	if (tempResult.distance < result.distance) {
		float3 temp = result.pointA;
		result.pointA = result.pointB;
		result.pointB = temp;
		result = tempResult;
	}

	closest_vert_to_tri(triABC, triDEF, tempResult);

	if (tempResult.distance < result.distance) {
	result = tempResult;
	}

	// result = lerpResult(
	//   lerpResult(vtRes21, vtRes12, minDist12),
	//   contactResult,
	//   contact
	// );

	return result;
}



[numthreads(64, 1, 1)] void MeshToPoints(uint3 id : SV_DispatchThreadID) {
	float3 a0, a1, a2;

	get_mesh_triangle_a(id.x, a0, a1, a2);

	float3 tri[3] = {a0, a1, a2};

	float testDistance;
	float3 testNearPoint;

	tri_closest_point(tri, _Points[0], testDistance, testNearPoint);

	DistanceResult minResult;
	minResult.distance = testDistance;
	minResult.pointA = testNearPoint;
	minResult.pointB = _Points[0];
	
	for (int i = 1; i < _PointsCount; i++) {

		tri_closest_point(tri, _Points[i], testDistance, testNearPoint);

		// int testLessThanMin = step(testDistance, minResult.distance);
		// minResult.distance = lerp(minResult.distance, testDistance, testLessThanMin); 
		// minResult.pointA = lerp(minResult.pointA, testNearPoint, testLessThanMin); 
		// minResult.pointB = lerp(minResult.pointB, _Points[i], testLessThanMin); 

		if (testDistance < minResult.distance) {
			minResult.distance = testDistance;
			minResult.pointA = testNearPoint;
			minResult.pointB = _Points[i];
		}
	}

	minResult.intersecting = 0;

	_ResultBuffer[id.x] = minResult;
}

[numthreads(64, 1, 1)] void SkinToPoints(uint3 id : SV_DispatchThreadID) {
	float3 a0, a1, a2;

	get_skinned_triangle_a(id.x, a0, a1, a2);

	float3 tri[3] = {a0, a1, a2};

	float testDistance;
	float3 testNearPoint;
	DistanceResult minResult;

	tri_closest_point(tri, _Points[0], testDistance, testNearPoint);
	minResult.distance = testDistance;
	minResult.pointA = testNearPoint;
	minResult.pointB = _Points[0];
	
	for (int i = 1; i < _PointsCount; i++) {

		tri_closest_point(tri, _Points[i], testDistance, testNearPoint);

		// int testLessThanMin = step(testDistance, minResult.distance);
		// minResult.distance = lerp(minResult.distance, testDistance, testLessThanMin); 
		// minResult.pointA = lerp(minResult.pointA, testNearPoint, testLessThanMin); 
		// minResult.pointB = lerp(minResult.pointB, _Points[i], testLessThanMin); 

		if (testDistance < minResult.distance) {
			minResult.distance = testDistance;
			minResult.pointA = testNearPoint;
			minResult.pointB = _Points[i];
		}
	}

	minResult.intersecting = 0;

	_ResultBuffer[id.x] = minResult;
}

[numthreads(64, 1, 1)] void MeshToMesh(uint3 id : SV_DispatchThreadID) {
  float3 a0, a1, a2;
  float3 b0, b1, b2;

  get_mesh_triangle_a(id.x, a0, a1, a2);
  get_mesh_triangle_b(0, b0, b1, b2);

  DistanceResult minResult = tri_to_tri_distance(a0, a1, a2, b0, b1, b2);

  DistanceResult currentResult;
  for (int i = 1; i < _MeshTriangleIndexesB; i++) {
	get_mesh_triangle_b(i, b0, b1, b2);

	currentResult = tri_to_tri_distance(a0, a1, a2, b0, b1, b2);

	// int currentLessThanMin = step(currentResult.distance, minResult.distance);
	// minResult.distance = lerp(minResult.distance, currentResult.distance, currentLessThanMin); 
	// minResult.pointA = lerp(minResult.pointA, currentResult.pointA, currentLessThanMin); 
	// minResult.pointB = lerp(minResult.pointB, currentResult.pointB, currentLessThanMin); 
	
	if (currentResult.distance < minResult.distance) {
	  minResult = currentResult;
	}
  }

  _ResultBuffer[id.x] = minResult;
}

[numthreads(64, 1, 1)] void SkinToMesh(uint3 id : SV_DispatchThreadID) {
  float3 a0, a1, a2;
  float3 b0, b1, b2;

  get_skinned_triangle_a(id.x, a0, a1, a2);
  get_mesh_triangle_b(0, b0, b1, b2);

  DistanceResult minResult = tri_to_tri_distance(a0, a1, a2, b0, b1, b2);

  DistanceResult currentResult;
  for (int i = 1; i < _MeshTriangleIndexesB; i++) {
	get_mesh_triangle_b(i, b0, b1, b2);

	currentResult = tri_to_tri_distance(a0, a1, a2, b0, b1, b2);

	// int currentLessThanMin = step(currentResult.distance, minResult.distance);
	// minResult.distance = lerp(minResult.distance, currentResult.distance, currentLessThanMin); 
	// minResult.pointA = lerp(minResult.pointA, currentResult.pointA, currentLessThanMin); 
	// minResult.pointB = lerp(minResult.pointB, currentResult.pointB, currentLessThanMin); 

	if (currentResult.distance < minResult.distance) {
	  minResult = currentResult;
	}
  }

  _ResultBuffer[id.x] = minResult;
}

[numthreads(64, 1, 1)] void SkinToSkin(uint3 id : SV_DispatchThreadID) {
  float3 a0, a1, a2;
  float3 b0, b1, b2;

  get_skinned_triangle_a(id.x, a0, a1, a2);
  get_skinned_triangle_b(0, b0, b1, b2);

  DistanceResult minResult = tri_to_tri_distance(a0, a1, a2, b0, b1, b2);

  DistanceResult currentResult;
  for (int i = 1; i < _MeshTriangleIndexesB; i++) {
	get_skinned_triangle_b(i, b0, b1, b2);

	currentResult = tri_to_tri_distance(a0, a1, a2, b0, b1, b2);

	// int currentLessThanMin = step(currentResult.distance, minResult.distance);
	// minResult.distance = lerp(minResult.distance, currentResult.distance, currentLessThanMin); 
	// minResult.pointA = lerp(minResult.pointA, currentResult.pointA, currentLessThanMin); 
	// minResult.pointB = lerp(minResult.pointB, currentResult.pointB, currentLessThanMin); 

	if (currentResult.distance < minResult.distance) {
	  minResult = currentResult;
	}
  }

  _ResultBuffer[id.x] = minResult;
}


DistanceResult sphere_to_tri_distance(float3 A, float3 B, float3 C, float3 S, float R) {
	float3 tri[3] = {A, B, C};

	DistanceResult res;
	float3 triPoint;
	float triDist;

	tri_closest_point(tri, S, triDist, triPoint);

	float3 centerToTri = triPoint - S;
	

	if (triDist < R) {
		res.intersecting = 1;
		return res;
	}

	res.pointA = S + normalize(centerToTri) * R;
	res.pointB = triPoint;
	res.distance = distance(res.pointA, res.pointB);
	res.intersecting = 0;
	return res;
}

DistanceResult capsule_to_tri_distance(float3 A, float3 B, float3 C, float3 S1, float3 S2, float R) {
	DistanceResult capToTri = LineToTriangle(S1, S2, A, B, C);

	if (capToTri.intersecting == 1) return capToTri;
	if (capToTri.distance < R) {
		capToTri.intersecting = 1;
		return capToTri;
	}

	float3 fromCapToTri = capToTri.pointB - capToTri.pointA;
	capToTri.pointA = capToTri.pointA + normalize(fromCapToTri) * R;
	capToTri.distance = distance(capToTri.pointA, capToTri.pointB);
	return capToTri;
}

DistanceResult box_to_tri_distance(float3 A, float3 B, float3 C, float3 Size, float4x4 Transform) {

	float3 verts[8] = {
		float3( Size.x,  Size.y, -Size.z) * 0.5f,
		float3(-Size.x,  Size.y, -Size.z) * 0.5f,
		float3( Size.x, -Size.y, -Size.z) * 0.5f,
		float3(-Size.x, -Size.y, -Size.z) * 0.5f,
		float3( Size.x,  Size.y,  Size.z) * 0.5f,
		float3(-Size.x,  Size.y,  Size.z) * 0.5f,
		float3( Size.x, -Size.y,  Size.z) * 0.5f,
		float3(-Size.x, -Size.y,  Size.z) * 0.5f

	};

	int tris[36] = {
		0, 1, 2, 
		1, 3, 2, 
		2, 3, 7, 
		2, 7, 6, 
		1, 7, 3, 
		1, 5, 7, 
		6, 7, 4, 
		7, 5, 4, 
		0, 4, 1, 
		1, 4, 5, 
		2, 6, 4, 
		0, 2, 4
	};


	float3 D = verts[tris[0]];
	float3 E = verts[tris[1]];
	float3 F = verts[tris[2]];

	transform_triangle(D, E, F, Transform);

	DistanceResult minResult = tri_to_tri_distance(A, B, C, D, E, F);
	DistanceResult currentResult;
	for (int i = 3; i < 36; i+=3) {
		D = verts[tris[i]];
		E = verts[tris[i+1]];
		F = verts[tris[i+2]];

		transform_triangle(D, E, F, Transform);

		currentResult = tri_to_tri_distance(A, B, C, D, E, F);

		if (currentResult.distance < minResult.distance) {
			minResult = currentResult;
		}
	}

	return minResult;
}


[numthreads(64, 1, 1)] void SkinToPrimitives(uint3 id : SV_DispatchThreadID) {
  float3 a0, a1, a2;

  get_skinned_triangle_a(id.x, a0, a1, a2);

  DistanceResult minResult;
  	ComputePrimitive p = _Primitives[0];
  	if (p.type == 0) {
	  minResult = sphere_to_tri_distance(a0, a1, a2, p.position, p.radius);
  	} else if (p.type == 1) {
	  minResult = capsule_to_tri_distance(a0, a1, a2, p.position, p.extraVector, p.radius);
  	} else if (p.type == 2) {
	  minResult = box_to_tri_distance(a0, a1, a2, p.position, p.transform);
	}


  	DistanceResult currentResult;
  	for (int i = 1; i < _PrimitiveCount; i++) {

		ComputePrimitive p = _Primitives[i];
		if (p.type == 0) {
			currentResult = sphere_to_tri_distance(a0, a1, a2, p.position, p.radius);
		} else if (p.type == 1) {
			currentResult = capsule_to_tri_distance(a0, a1, a2, p.position, p.extraVector, p.radius);
		} else if (p.type == 2) {
			currentResult = box_to_tri_distance(a0, a1, a2, p.position, p.transform);
		}


		if (currentResult.distance < minResult.distance) {
		minResult = currentResult;
		}
	}

	_ResultBuffer[id.x] = minResult;
}


[numthreads(64, 1, 1)] void MeshToPrimitives(uint3 id : SV_DispatchThreadID) {
 	float3 a0, a1, a2;

  	get_mesh_triangle_a(id.x, a0, a1, a2);

  	DistanceResult minResult;
  	ComputePrimitive p = _Primitives[0];
  	if (p.type == 0) {
	  minResult = sphere_to_tri_distance(a0, a1, a2, p.position, p.radius);
  	} else if (p.type == 1) {
	  minResult = capsule_to_tri_distance(a0, a1, a2, p.position, p.extraVector, p.radius);
  	} else if (p.type == 2) {
	  minResult = box_to_tri_distance(a0, a1, a2, p.position, p.transform);
	}


  	DistanceResult currentResult;
  	for (int i = 1; i < _PrimitiveCount; i++) {

		ComputePrimitive p = _Primitives[i];
		if (p.type == 0) {
			currentResult = sphere_to_tri_distance(a0, a1, a2, p.position, p.radius);
		} else if (p.type == 1) {
			currentResult = capsule_to_tri_distance(a0, a1, a2, p.position, p.extraVector, p.radius);
		} else if (p.type == 2) {
			currentResult = box_to_tri_distance(a0, a1, a2, p.position, p.transform);
		}


		if (currentResult.distance < minResult.distance) {
	  		minResult = currentResult;
		}
  	}

  	_ResultBuffer[id.x] = minResult;
}
